#include <iostream>
using namespace std;

struct node {
    int data;
    node* left;
    node* right;
};

node* newNode(int data) {
    node* temp = new node();
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

void insert(node*& root, int val) {
    if (root == NULL) {
        root = newNode(val);
        cout << "Inserted " << val << " at Level 0\n";
        return;
    }

    node* temp = root;
    int level = 0;  // Track level while inserting
    while (true) {
        cout << "Current Node: " << temp->data << "\n";
        cout << "Enter L for left or R for right insertion: ";
        char dir;
        cin >> dir;

        if (dir == 'L' || dir == 'l') {
            if (temp->left == NULL) {
                temp->left = newNode(val);
                cout << "Inserted " << val << " to the left of " << temp->data << " at Level " << (level + 1) << "\n";
                return;
            } else {
                temp = temp->left;
            }
        } 
        else if (dir == 'R' || dir == 'r') {
            if (temp->right == NULL) {
                temp->right = newNode(val);
                cout << "Inserted " << val << " to the right of " << temp->data << " at Level " << (level + 1) << "\n";
                return;
            } else {
                temp = temp->right;
            }
        } 
        else {
            cout << "Invalid input! Please enter 'L' or 'R'.\n";
        }
        level++;
    }
}

void printInorder(node* root) {
    if (root == NULL) return;
    printInorder(root->left);
    cout << root->data << " ";
    printInorder(root->right);
}

void printPreorder(node* root) {
    if (root == NULL) return;
    cout << root->data << " ";
    printPreorder(root->left);
    printPreorder(root->right);
}

void printPostorder(node* root) {
    if (root == NULL) return;
    printPostorder(root->left);
    printPostorder(root->right);
    cout << root->data << " ";
}

int countNodes(node* root) {
    if (root == NULL) return 0;
    return 1 + countNodes(root->left) + countNodes(root->right);
}

int countLeafNodes(node* root) {
    if (root == NULL) return 0;
    if (root->left == NULL && root->right == NULL) return 1;
    return countLeafNodes(root->left) + countLeafNodes(root->right);
}

int height(node* root) {
    if (root == NULL) return -1;
    return 1 + max(height(root->left), height(root->right));
}

// Function to find the level of a node
int getLevel(node* root, int val, int level = 0) {
    if (root == NULL) return -1;
    if (root->data == val) return level;

    int leftLevel = getLevel(root->left, val, level + 1);
    if (leftLevel != -1) return leftLevel;

    return getLevel(root->right, val, level + 1);
}

int main() {
    node* root = NULL;
    int ch, val;

    while (true) {
        cout << "\nOperations:\n";
        cout << "1. Create Node (Insert)\n";
        cout << "2. Inorder Traversal\n";
        cout << "3. Preorder Traversal\n";
        cout << "4. Postorder Traversal\n";
        cout << "5. Total Number of Nodes\n";
        cout << "6. Number of Leaf Nodes\n";
        cout << "7. Height of Tree\n";
        cout << "8. Find Level of a Node\n";
        cout << "9. Exit\n";
        cout << "Enter choice: ";
        cin >> ch;

        switch (ch) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> val;
                insert(root, val);
                break;
            case 2:
                cout << "Inorder Traversal: ";
                printInorder(root);
                cout << endl;
                break;
            case 3:
                cout << "Preorder Traversal: ";
                printPreorder(root);
                cout << endl;
                break;
            case 4:
                cout << "Postorder Traversal: ";
                printPostorder(root);
                cout << endl;
                break;
            case 5:
                cout << "Total Number of Nodes: " << countNodes(root) << endl;
                break;
            case 6:
                cout << "Number of Leaf Nodes: " << countLeafNodes(root) << endl;
                break;
            case 7:
                cout << "Height of Tree: " << height(root) << endl;
                break;
            case 8:
                cout << "Enter value to find level: ";
                cin >> val;
                int level;
                level = getLevel(root, val);
                if (level != -1)
                    cout << "Level of " << val << " is: " << level << endl;
                else
                    cout << "Node not found!\n";
                break;
            case 9:
                return 0;
        }
    }

return 0;
}
